{
    "contents" : "#' getSag\n#'\n#' Computes spectral slopes from absorbance data using a linear regression to determine the first order decay function as defined in Helms et al. 2008, Limnol. Oceanogr., 53(3), 955-969. aL = aRef * exp(-S*(L-LRef)) where a = absorbance coefficient, S = spectral slope, and L = wavelength. Function assumes that the column names of the absorbance data file being used are formatted as grnumbers.\n#' @param wavelength absorbance numeric wavelength \n#' @param rangeReg numeric string with absorbance wavelength range to be considered for computing spectral slope\n#' @param rangeGap numeric string with the absorbance wavelength range for which decay function should be applied\n#' @param dataAbs dataframe with absorbance spectra results, one column per sample\n#' @param waveCol character column name to define the wavelengths for which absorbance was measured\n#' @param colSubsetString character with unique letters to identify which columns have absorbance data. \n#' The default is \"gr\" to comply with the common naming from the CA WSC\n#' @param dataSummary dataframe with summary absorbance and fluoresence data. This \n#' function adds columns to the end of this dataframe as additional summary data.\n#' @param grnum character column name that defines the grnumbers in the dataSummary dataframe.\n#' @return dataframe with the added spectral slope for each sample and plots with the absorbance spectra for rangeReg showing the \n#' model constructed using the spectral slope (red); and the absorbance data where black = the data in rangeReg that is not in rangeGap and blue = the data from rangeGap.\n#' @export \n#' @examples\n#' wavelength <- 267\n#' rangeReg <- c(240,340)\n#' rangeGap <- c(255,300)\n#' dataAbs <- dfabs\n#' waveCol <- \"wavelengths\"\n#' colSubsetString <- \"gr\"\n#' dataSummary <- dfsummary\n#' grnum <- \"GRnumber\"\n#' testdfOpt <- getExpResid(wavelength,rangeReg,rangeGap,dataAbs,waveCol,\n#'                     colSubsetString,dataSummary,grnum)\ngetExpResid <- function(wavelength,rangeReg,rangeGap,dataAbs,waveCol,colSubsetString,dataSummary,grnum){\n  df <- dataAbs[,grep(colSubsetString,names(dataAbs))]\n  grnums <- as.character(dataSummary[,grnum])\n  df <- df[,grnums]\n  aRef <- which(dataAbs[,waveCol]==rangeReg[2])\n  aStart <- which(dataAbs[,waveCol]==rangeReg[2])\n  L <- dataAbs[,waveCol]\n  \n  wvRows <- which((L>=rangeReg[1] & L<=rangeGap[1]) | (L>=rangeGap[2] & L<=rangeReg[2]))\n  wvRowsAll <- which((L>=rangeReg[1] & L<=rangeReg[2]))\n  wvRowsGap <- wvRowsAll[which(!wvRowsAll %in% wvRows)]\n  AResids <- numeric()\n  aWavelngth <- which(dataAbs[wvRowsAll,waveCol]==wavelength)  \n  \n  for(i in 1:dim(df)[2]){  \n    aCoef <- df[wvRows,i]\n    names(aCoef) <- dfabs[wvRows,waveCol]\n    if(sum(aCoef>0)){\n      if(min(aCoef) <= 0)\n      {minA <- min(aCoef[aCoef>0])\n       aCoef[aCoef<=0] <- minA/2\n      }\n      y <- log(aCoef/aCoef[as.character(rangeReg[2])])\n      x <- L[wvRows]-L[which(L==rangeReg[2])]\n      m <- lm(y~x)\n      Sag <- -coef(m)[2]\n      aLAll <- df[aRef,i] * exp(-Sag*(dataAbs[wvRowsAll,waveCol]-rangeReg[2]))\n      AResidsAll <- df[wvRowsAll,i] - aLAll\n      AResid <- AResidsAll[aWavelngth]     \n      AResids <- c(AResids,AResid)\n      residRow <- which(dataAbs[wvRowsAll,waveCol]==wavelength)\n      plot(df[wvRowsAll,i]~dataAbs[wvRowsAll,waveCol],main=names(df)[i])\n      points(df[wvRowsGap,i]~dataAbs[wvRowsGap,waveCol],col=\"blue\")\n      \n      lines(aLAll~dataAbs[wvRowsAll,waveCol],col=\"red\")\n    }else{AResid <- NA\n    }\n  }\n  dfResids <- data.frame(grnums,AResids)\n  names(dfResids) <- c(grnum,\"Aresids\")\n  dataSummaryFinal <- merge(dataSummary,dfResids,by=grnum,all=TRUE)\n  return(dataSummaryFinal)\n}\n",
    "created" : 1403704205499.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "3607911473",
    "id" : "1BBB8A8",
    "lastKnownWriteTime" : 1403038820,
    "path" : "D:/stcData/R_projects/USGSHydroOpt/R/ExpResidFxn.R",
    "project_path" : "R/ExpResidFxn.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}