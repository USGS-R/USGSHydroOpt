{
    "contents" : "#' getMeanFl\n#'\n#' \n#' and freshness index as defined by PARLANTI, E., K. WORZ, L. GEOFFROY, AND M. LAMOTTE. \n#' 2000. Dissolved organic matter fluorescence spectroscopy as a tool to estimate \n#' biological activity in a coastal zone submitted to anthropogenic inputs. Org. \n#' Geochem. 31: 1765-1781, doi:10.1016/S0146-6380(00)00124-8\n#' FreshI = ex310em380/max(ex310 between em470 and em520)\n#'\n#' @param a an array with 3-D fluorescence  results. The 3 dimensions are the excitation wavelength (character), the emission wavelength (character), and the sample number (character). \n#' This function assumes names of the third dimension in this array are sample numbers (GRnumber)\n#' @param signals dataframe defining the max and min excitation (integer) and the max and \n#' min emmission (integer) wavelengths for which to compute averages. Contains one column (character) with the names of the various parameters (e.g.,OB1,S1.50,B,T).\n#' @param Peak character column for the column in signals with parameters to be computed\n#' @param Ex1 the first integer excitation wavelength in the range\n#' @param Ex2 the second integer excitation wavelength in the range. This can be blank \n#' if one specific excitation wavelength is used.\n#' @param Em1 the first integer emmission wavelength in the range\n#' @param Em2 the second integer emmission wavelength in the range. This can be blank \n#' if one specific emmission wavelength is used.\n#' @param dataSummary dataframe with summary absorbance and fluoresence data. This \n#' function adds columns to the end of this dataframe as additional summary data.\n#' @param grnum character column name that defines the grnumbers in the dataSummary dataframe. \n#' @return dataSummary dataframe with the additional freshness index columns.\n#' @export\n#' @examples\n#' a <- a\n#' signals <- signals\n#' Peak <- \"Peak\"\n#' Ex1 <- \"Ex1\"\n#' Ex2 <- \"Ex2\"\n#' Em1 <- \"Em1\"\n#' Em2 <- \"Em2\"\n#' dataSummary <- dfsummary\n#' grnum <- \"GRnumber\"\n#' testMeanFl <- getMeanFl(a,signals,Peak,Ex1,Ex2,Em1,Em2,dataSummary,grnum)\ngetMeanFl <- function(a,\n                      signals,Peak,Ex1,Ex2,Em1,Em2,\n                      dataSummary,grnum){\n  a <- a[,,dataSummary[,grnum]]\n  grnums <- names(a[1,1,])\n  dfMeanFl <- data.frame(GRnumber=grnums)\n  names(dfMeanFl) <- grnum\n  Em <- as.numeric(names(a[1,,1]))\n  Ex <- as.numeric(names(a[,1,1]))\n  signals[,Ex2] <- ifelse(is.na(signals[,Ex2]),signals[,Ex1],signals[,Ex2])\n  signals[,Em2] <- ifelse(is.na(signals[,Em2]),signals[,Em1],signals[,Em2])\n  \n  for (i in 1:dim(signals)[1]){\n    \n    sEx1 <- which.min(abs(Ex-signals[i,Ex1]))\n    sEx2 <- which.min(abs(Ex-signals[i,Ex2]))\n    sEm1 <- which.min(abs(Em-signals[i,Em1]))\n    sEm2 <- which.min(abs(Em-signals[i,Em2]))\n    \n    MeanFl <- numeric()\n    if(sEx1!=sEx2 & sEm1!=sEm2){\n      for (j in 1:length(grnums)){\n        a2 <- a[c(sEx1:sEx2),c(sEm1:sEm2),grnums]\n        MeanFl <- c(MeanFl,mean(a2[,,j]))\n      }\n    }else{if(sEx1==sEx2 & sEm1!=sEm2){\n      for (j in 1:length(grnums)){\n        a2 <- a[sEx1,c(sEm1:sEm2),grnums]\n        MeanFl <- c(MeanFl,mean(a2[,j]))\n      }\n    }else{if(sEx1!=sEx2 & sEm1==sEm2){\n      for (j in 1:length(grnums)){\n        a2 <- a[c(sEx1,sEx2),sEm1,grnums]\n        MeanFl <- c(MeanFl,mean(a2[,j]))\n      }\n    }else{if(sEx1==sEx2 & sEm1==sEm2){\n      pair <- a[sEx1,sEm1,grnums]\n      MeanFl <- c(MeanFl,pair)\n    }\n    }\n    }\n    }\n    dfMeanFl <- cbind(dfMeanFl,MeanFl)\n  }\n  names(dfMeanFl) <- c(grnum,signals[,Peak])\n  dfReturn <- merge(dataSummary,dfMeanFl,all=TRUE)\n  return(dfReturn)\n}\n",
    "created" : 1403704232783.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2849445542",
    "id" : "190BCEFC",
    "lastKnownWriteTime" : 1403038902,
    "path" : "D:/stcData/R_projects/USGSHydroOpt/R/meanFlFxn.R",
    "project_path" : "R/meanFlFxn.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}